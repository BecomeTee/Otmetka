@page "/"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Net
@using System.Threading.Tasks
@inject NavigationManager NavigationManager
<PageTitle>Home</PageTitle>

<form class="input-group" @onsubmit="PerformSearch">
    <input type="text" class="form-control" @bind="searchText" placeholder="Поиск" aria-label="Search" aria-describedby="button-addon2">
    <button type="submit" class="btn btn-outline-secondary" id="button-addon2" style="width: 100px;">
        <i class="material-icons">найти</i>
    </button>
</form>

@if (isSearching)
{
    <p>Поиск...</p>
}
else if (searchResults != null && searchResults.Count > 0)
{
    <h1>Результаты поиска:</h1>
 
                @for (int i = 0; i < searchResults.Count; i++)
                {
                    var result = searchResults[i];
                    <div class="container mt-3 p-3 d-flex justify-content-between align-items-center" style="background-color: #f2f2f2;">
                        <div class="d-flex align-items-center">
                            <p class="mb-0" style="margin-right: 25px; font-size: 32px; line-height: 1;">@(i+1). @result.Name</p>
                            <p class="mb-0" style="font-size: 32px; line-height: 1;">@result.Group</p>
                        </div>
                        <button class="btn btn-primary align-self-center" @onclick="(e) => NavigateToAttendance()">Узнать расписание</button>
                    </div>
                }
}
else if (!string.IsNullOrWhiteSpace(searchText) && !isValidInput)
{
    <p>Неверный запрос</p>
    isValidInput = true;
}
else if (!string.IsNullOrWhiteSpace(searchText))
{
    <p>Студент не найден</p>
}
else
{
    <p>Введите в поиск имя и фамилию студента, у которого вы хотите посмотреть расписание</p>
    <table class="table table-bordered">
        <tbody>
            <tr>
            <tr>
                <td colspan="5" style="background-color: #f2f2f2; text-align: center;">15.01.2024</td>
            </tr>

            </tr>
            <tr>
                <td style="text-align: center;">09.00 - 10.35</td>
                <td style="text-align: center;">Математика</td>
                <td style="text-align: center;"> Ауд. 200</td>
                <td style="text-align: center;">Лабковская Р.Я.</td>
                <td style="text-align: center;">
                    <span>Посетил занятие</span>
                </td>
            </tr>
        </tbody>
    </table>
}

@if (classes != null && classes.Count > 0)
{

    <h1>Расписание:</h1>
        @foreach (var classInfo in classes)
        {
            <table class="table table-bordered">
                <tbody>
                <tr>
                <tr>
                    <td colspan="5" style="background-color: #f2f2f2; text-align: center;">@classInfo.DateStart.ToString("dd.MM.yyyy")</td>
                </tr>

                </tr>
                <tr>
                    <td style="text-align: center;">@classInfo.DateStart.ToString("HH:mm") - @classInfo.DateFinish.ToString("HH:mm")</td>
                    <td style="text-align: center;">@classInfo.Name</td>
                    <td style="text-align: center;"> Ауд. @classInfo.Room</td>
                    <td style="text-align: center;">@classInfo.Teacher</td>
                        <td>
                             @if (attendances.Any(a => a.Id_class == classInfo.Id_class))
                            {
                                var attendance = attendances.First(a => a.Id_class == classInfo.Id_class);
                                if (attendance.Attend)
                                {
                                    <span>Посетил занятие</span>
                                }
                                else
                                {
                                    <button class="btn btn-primary">Отметиться</button>
                                }
                            }
                            else
                            {
                                <button class="btn btn-primary">Отметиться</button>
                            }
                        </td>
                    </tr>
                </tbody>
            </table>
        }
}


@code {
    string searchText = "";
    List<(Guid ID, string Name, string Group)> searchResults = new List<(Guid ID, string Name, string Group)>();
    List<(Guid Id_class, Guid Id_student, bool Attend)> attendances = new List<(Guid Id_class, Guid Id_student, bool Attend)>();
    List<(Guid Id_class, string Name, DateTime DateStart, DateTime DateFinish, int Room, string Teacher)> classes = new List<(Guid Id_class, string Name, DateTime DateStart, DateTime DateFinish, int Room, string Teacher)>();
    bool isSearching = false;
    bool isValidInput = true;

    [Inject]
    HttpClient HttpClient { get; set; }

    void NavigateToAttendance()
    {
        NavigationManager.NavigateTo($"/Attendance");

    }

    async Task PerformSearch()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(searchText))
            {
                isSearching = true; // Устанавливаем флаг поиска
                string[] searchParams = searchText.Split(' ');

                if (searchParams.Length >= 2)
                {

                    string name = searchParams[0];
                    string group = searchParams[1];

                    HttpResponseMessage response = await HttpClient.GetAsync($"https://localhost:7112/api/Stud/GetStudentsByNameNGroup/{name}/{group}");

                    if (response.IsSuccessStatusCode)
                    {
                        var studentResponses = await response.Content.ReadFromJsonAsync<List<StudentDto>>();
                        searchResults = studentResponses.Select(sr => (sr.Id, sr.Name, sr.Group)).ToList();
                        isValidInput = true;
                    }
                    else if (response.StatusCode == HttpStatusCode.NotFound)
                    {
                        NavigationManager.NavigateTo($"/oops");
                        searchResults.Clear();
                        isValidInput = true;
                    }
                }
                else
                {
                    isValidInput = false; // Устанавливаем флаг неверного ввода
                    searchResults.Clear();
                }

                isSearching = false; // Устанавливаем флаг окончания поиска
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка: {ex.Message}");
            // Обработка исключения
            isSearching = false; // Устанавливаем флаг окончания поиска при ошибке
        }
    }
}
